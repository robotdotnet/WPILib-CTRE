import org.gradle.internal.os.OperatingSystem

plugins {
    id 'net.ltgt.errorprone' version '0.0.8'
    id 'edu.wpi.first.wpilib.versioning.WPILibVersioningPlugin' version '1.6'
    id "de.undercouch.download" version "3.1.2"
}

allprojects {
    repositories {
        mavenCentral()
    }
}

import de.undercouch.gradle.tasks.download.Download

if (!hasProperty('releaseType')) {
    WPILibVersion {
        releaseType = 'official'
    }
}

ext.setupDefines = { project, binaries ->
    binaries.all {
        if (project.hasProperty('debug')) {
            project.setupDebugDefines(cppCompiler, linker)
        } else {
            project.setupReleaseDefines(cppCompiler, linker)
        }
    }
}

ext.ctreUnzipLocation = "${buildDir}/ctre"

task downloadCtreSdk(type: Download) {
    src 'http://www.ctr-electronics.com//downloads/lib/CTRE_FRCLibs_NON-WINDOWS_v4.4.1.9.zip'
    dest buildDir
}

task unzipCtreSdk(type: Copy) {
    dependsOn downloadCtreSdk
    
    from zipTree("${buildDir}/CTRE_FRCLibs_NON-WINDOWS_v4.4.1.9.zip")
    into ctreUnzipLocation
}

ext.ctre = ctreUnzipLocation
ext.ctreInclude = "$ctreUnzipLocation/cpp/include"
ext.ctreLocation = "$ctreUnzipLocation/cpp/lib"
ext.ctreStaticLib = "$ctreLocation/libCTRLib.a"

ext.addCtreLinks = { compileTask, linker, targetPlatform ->
    compileTask.dependsOn project(':').unzipCtreSdk
    String architecture = targetPlatform.architecture
    if (architecture.contains('arm')) {
        // Grab the static library and link it
        linker.args ctreStaticLib

        def libraryPath = ctreLocation

        linker.args << '-L' + libraryPath
    }
}

apply from: "locations.gradle"

apply from: "dependencies.gradle"

defineWpiUtilProperties()
defineHALProperties()

apply plugin: 'cpp'

apply from: "${rootDir}/toolchains/arm.gradle"

model {
    components {
        ctreextern(NativeLibrarySpec) {
            targetPlatform 'arm'
            setupDefines(project, binaries)

            binaries.all {
                tasks.withType(CppCompile) {
                    cppCompiler.args "-DNAMESPACED_WPILIB"
                    addCtreLinks(it, linker, targetPlatform)
                    addHalLibraryLinks(it, linker, targetPlatform)
                    addWpiUtilLibraryLinks(it, linker, targetPlatform)
                }
            }

            sources {
                cpp {
                    source {
                        srcDirs = [driverSrc]
                        includes = ["**/*.cpp",]
                    }
                    exportedHeaders {
                        srcDirs = [driverInclude, halInclude, wpiUtilInclude, ctreInclude]
                        includes = ['**/*.h']
                    }
                }
            }
        }
    }
}

project.debugStripSetup()

def netDir = "${rootDir}/src/FRC.WPILib.CTRE/Libraries"

task copyToNet(type: Copy) {
    description = 'Copies shared library to .NET source folder'
    group = 'WPILib'
    destinationDir = file(netDir)

    project.model {
            binaries {
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        include '*.so'
                    }
                }
            }
        }
}

project.tasks.whenTaskAdded { task ->
    def name = task.name.toLowerCase()
    if (name.contains("sharedlibrary") || name.contains("staticlibrary")) {
        copyToNet.dependsOn task
    }
}

build.dependsOn copyToNet

clean {
    delete buildDir
    delete releaseDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
